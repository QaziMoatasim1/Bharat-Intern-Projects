# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load your dataset (replace 'data.csv' with your dataset file)
data = pd.read_csv('data.csv')

# Assuming 'X' contains the features and 'y' contains the target variable (house prices)
X = data[['feature1', 'feature2', 'feature3']]  # Replace with your feature columns
y = data['house_price']  # Replace with your target column

# Split the dataset into training and testing sets (e.g., 80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared (R2) Score: {r2:.2f}")

# Visualize the predictions (optional)
plt.scatter(y_test, y_pred)
plt.xlabel("Actual House Prices")
plt.ylabel("Predicted House Prices")
plt.title("Actual vs. Predicted House Prices")
plt.show()

# You can use the trained model to make predictions on new data
# For example:
# new_data = np.array([[value1, value2, value3]])  # Replace with your new data
# predicted_price = model.predict(new_data)
# print(f"Predicted Price: {predicted_price[0]:.2f}")
